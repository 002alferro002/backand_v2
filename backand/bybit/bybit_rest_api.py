import asyncio
import aiohttp
import requests
from datetime import datetime, timezone
from typing import List, Dict, Optional
from cryptoscan.backand.core.core_logger import get_logger
from cryptoscan.backand.core.core_exceptions import APIException

logger = get_logger(__name__)


class BybitRestAPI:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å REST API Bybit"""

    def __init__(self):
        self.base_url = "https://api.bybit.com"
        self.session = None

    async def start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è HTTP —Å–µ—Å—Å–∏–∏"""
        if not self.session:
            timeout = aiohttp.ClientTimeout(total=30)
            self.session = aiohttp.ClientSession(
                timeout=timeout,
                headers={
                    'User-Agent': 'CryptoScan/1.0',
                    'Content-Type': 'application/json'
                }
            )
            logger.info("üåê HTTP —Å–µ—Å—Å–∏—è –¥–ª—è Bybit API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    async def stop(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
            self.session = None
            logger.info("üåê HTTP —Å–µ—Å—Å–∏—è –¥–ª—è Bybit API –∑–∞–∫—Ä—ã—Ç–∞")

    async def get_server_time(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            url = f"{self.base_url}/v5/market/time"
            
            if not self.session:
                await self.start()

            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('retCode') == 0:
                        result = data['result']
                        return {
                            'server_time_seconds': int(result['timeSecond']),
                            'server_time_nanos': int(result['timeNano']),
                            'server_time_ms': int(result['timeSecond']) * 1000 + (int(result['timeNano']) // 1_000_000) % 100
                        }
                    else:
                        raise APIException(f"API –æ—à–∏–±–∫–∞: {data.get('retMsg')}")
                else:
                    raise APIException(f"HTTP –æ—à–∏–±–∫–∞: {response.status}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            raise APIException(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: {e}")

    async def get_perpetual_pairs(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–µ—Å—Å—Ä–æ—á–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
        try:
            url = f"{self.base_url}/v5/market/instruments-info"
            params = {'category': 'linear'}
            
            if not self.session:
                await self.start()

            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('retCode') == 0:
                        pairs = []
                        for instrument in data['result']['list']:
                            if (instrument['contractType'] == 'LinearPerpetual' and
                                    instrument['status'] == 'Trading' and
                                    instrument['symbol'].endswith('USDT')):
                                pairs.append(instrument['symbol'])
                        
                        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
                        return pairs
                    else:
                        raise APIException(f"API –æ—à–∏–±–∫–∞: {data.get('retMsg')}")
                else:
                    raise APIException(f"HTTP –æ—à–∏–±–∫–∞: {response.status}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            raise APIException(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")

    async def get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞"""
        try:
            url = f"{self.base_url}/v5/market/tickers"
            params = {'category': 'linear', 'symbol': symbol}
            
            if not self.session:
                await self.start()

            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('retCode') == 0 and data['result']['list']:
                        return float(data['result']['list'][0]['lastPrice'])
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
                        return 0.0
                else:
                    logger.warning(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {symbol}: {response.status}")
                    return 0.0

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return 0.0

    async def get_historical_price(self, symbol: str, days_ago: int) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞"""
        try:
            url = f"{self.base_url}/v5/market/kline"
            end_time = int(datetime.now().timestamp() * 1000)
            start_time = end_time - (days_ago * 24 * 60 * 60 * 1000)
            
            params = {
                'category': 'linear',
                'symbol': symbol,
                'interval': 'D',
                'start': start_time,
                'limit': 1
            }
            
            if not self.session:
                await self.start()

            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('retCode') == 0 and data['result']['list']:
                        return float(data['result']['list'][0][4])  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–≤–µ—á–∏
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É –¥–ª—è {symbol}")
                        return 0.0
                else:
                    logger.warning(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã {symbol}: {response.status}")
                    return 0.0

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return 0.0

    async def get_kline_data(self, symbol: str, start_time_ms: int, end_time_ms: int, limit: int = 1000) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π"""
        try:
            url = f"{self.base_url}/v5/market/kline"
            params = {
                'category': 'linear',
                'symbol': symbol,
                'interval': '1',
                'start': start_time_ms,
                'end': end_time_ms,
                'limit': limit
            }
            
            if not self.session:
                await self.start()

            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('retCode') == 0:
                        klines = data['result']['list']
                        if klines:
                            # Bybit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                            klines.reverse()
                            
                            processed_klines = []
                            for kline in klines:
                                processed_klines.append({
                                    'timestamp': int(kline[0]),
                                    'open': float(kline[1]),
                                    'high': float(kline[2]),
                                    'low': float(kline[3]),
                                    'close': float(kline[4]),
                                    'volume': float(kline[5])
                                })
                            
                            return processed_klines
                        else:
                            logger.debug(f"üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö kline –¥–ª—è {symbol} –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")
                            return []
                    else:
                        raise APIException(f"API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ kline –¥–ª—è {symbol}: {data.get('retMsg')}")
                else:
                    raise APIException(f"HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ kline –¥–ª—è {symbol}: {response.status}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è kline –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
            raise APIException(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è kline –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def get_order_book(self, symbol: str, limit: int = 25) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–∫–∞–Ω–∞ –∑–∞—è–≤–æ–∫"""
        try:
            url = f"{self.base_url}/v5/market/orderbook"
            params = {
                'category': 'linear',
                'symbol': symbol,
                'limit': limit
            }
            
            if not self.session:
                await self.start()

            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('retCode') == 0:
                        result = data['result']
                        return {
                            'bids': [[float(bid[0]), float(bid[1])] for bid in result.get('b', [])],
                            'asks': [[float(ask[0]), float(ask[1])] for ask in result.get('a', [])],
                            'timestamp': int(datetime.now(timezone.utc).timestamp() * 1000)
                        }
                    else:
                        logger.warning(f"‚ö†Ô∏è API –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è {symbol}: {data.get('retMsg')}")
                        return None
                else:
                    logger.warning(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è {symbol}: {response.status}")
                    return None

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–∫–∞–Ω–∞ –¥–ª—è {symbol}: {e}")
            return None

    async def batch_get_current_prices(self, symbols: List[str]) -> Dict[str, float]:
        """–ü–∞–∫–µ—Ç–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö —Ü–µ–Ω"""
        try:
            url = f"{self.base_url}/v5/market/tickers"
            params = {'category': 'linear'}
            
            if not self.session:
                await self.start()

            async with self.session.get(url, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('retCode') == 0:
                        prices = {}
                        for ticker in data['result']['list']:
                            symbol = ticker['symbol']
                            if symbol in symbols:
                                prices[symbol] = float(ticker['lastPrice'])
                        
                        return prices
                    else:
                        raise APIException(f"API –æ—à–∏–±–∫–∞: {data.get('retMsg')}")
                else:
                    raise APIException(f"HTTP –æ—à–∏–±–∫–∞: {response.status}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")
            return {}

    def get_current_price_sync(self, symbol: str) -> float:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        try:
            url = f"{self.base_url}/v5/market/tickers"
            params = {'category': 'linear', 'symbol': symbol}
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('retCode') == 0 and data['result']['list']:
                    return float(data['result']['list'][0]['lastPrice'])
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
                    return 0.0
            else:
                logger.warning(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã {symbol}: {response.status_code}")
                return 0.0

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return 0.0

    def get_historical_price_sync(self, symbol: str, days_ago: int) -> float:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
        try:
            url = f"{self.base_url}/v5/market/kline"
            end_time = int(datetime.now().timestamp() * 1000)
            start_time = end_time - (days_ago * 24 * 60 * 60 * 1000)
            
            params = {
                'category': 'linear',
                'symbol': symbol,
                'interval': 'D',
                'start': start_time,
                'limit': 1
            }
            
            response = requests.get(url, params=params, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                
                if data.get('retCode') == 0 and data['result']['list']:
                    return float(data['result']['list'][0][4])  # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–≤–µ—á–∏
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É –¥–ª—è {symbol}")
                    return 0.0
            else:
                logger.warning(f"‚ö†Ô∏è HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã {symbol}: {response.status_code}")
                return 0.0

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
            return 0.0