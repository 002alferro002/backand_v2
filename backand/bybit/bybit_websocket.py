import asyncio
import json
import logging
import websockets
from typing import List, Dict, Optional, Set
from datetime import datetime, timedelta, timezone
from cryptoscan.backand.core.core_logger import get_logger
from cryptoscan.backand.core.core_exceptions import WebSocketException
from cryptoscan.backand.settings import get_setting

logger = get_logger(__name__)


class BybitWebSocketManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit"""

    def __init__(self, alert_manager, connection_manager):
        self.alert_manager = alert_manager
        self.connection_manager = connection_manager
        self.websocket = None
        self.is_running = False
        self.websocket_connected = False
        self.streaming_active = False

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket
        self.ws_url = "wss://stream.bybit.com/v5/public/linear"
        self.ping_interval = get_setting('WS_PING_INTERVAL', 20)
        self.ping_timeout = get_setting('WS_PING_TIMEOUT', 10)
        self.close_timeout = get_setting('WS_CLOSE_TIMEOUT', 10)
        self.max_size = get_setting('WS_MAX_SIZE', 10000000)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        self.subscribed_pairs = set()
        self.subscription_pending = set()
        self.trading_pairs = set()

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.last_message_time = None
        self.messages_received = 0
        self.last_stats_log = datetime.now(timezone.utc)
        self.ping_task = None

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = 10
        self.reconnect_delay = 5
        self.connection_stable_time = 60

        # –ö—ç—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π
        self.processed_candles = {}

    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket"""
        try:
            logger.info(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket: {self.ws_url}")

            async with websockets.connect(
                    self.ws_url,
                    ping_interval=self.ping_interval,
                    ping_timeout=self.ping_timeout,
                    close_timeout=self.close_timeout,
                    max_size=self.max_size,
                    compression=None
            ) as websocket:
                self.websocket = websocket
                self.websocket_connected = True
                self.last_message_time = datetime.now(timezone.utc)

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
                self.subscribed_pairs.clear()
                self.subscription_pending.clear()

                # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
                if self.trading_pairs:
                    await self._subscribe_to_pairs(self.trading_pairs)

                logger.info(f"‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {len(self.trading_pairs)} –ø–∞—Ä")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                await self._send_connection_status("connected")

                # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                self.ping_task = asyncio.create_task(self._monitor_connection())
                self.streaming_active = True

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                async for message in websocket:
                    if not self.is_running:
                        break

                    try:
                        await self._handle_message(message)
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        continue

        except websockets.exceptions.ConnectionClosedError as e:
            logger.warning(f"‚ö†Ô∏è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {e}")
            raise WebSocketException(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            raise WebSocketException(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        finally:
            self.websocket_connected = False
            self.streaming_active = False
            if self.ping_task:
                self.ping_task.cancel()

    async def _subscribe_to_pairs(self, pairs: Set[str]):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã"""
        if not pairs:
            return

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 50 –ø–∞—Ä
        batch_size = 50
        pairs_list = list(pairs)

        for i in range(0, len(pairs_list), batch_size):
            batch = pairs_list[i:i + batch_size]
            subscribe_message = {
                "op": "subscribe",
                "args": [f"kline.1.{pair}" for pair in batch]
            }

            try:
                await self.websocket.send(json.dumps(subscribe_message))
                logger.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞–∫–µ—Ç {i // batch_size + 1}: {len(batch)} –ø–∞—Ä")

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                self.subscription_pending.update(batch)

                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
                if i + batch_size < len(pairs_list):
                    await asyncio.sleep(0.5)

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –ø–∞–∫–µ—Ç {i // batch_size + 1}: {e}")
                continue

    async def _handle_message(self, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            self.last_message_time = datetime.now(timezone.utc)
            self.messages_received += 1

            data = json.loads(message)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if 'success' in data:
                if data['success']:
                    logger.debug("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ WebSocket –ø–∞–∫–µ—Ç")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ WebSocket: {data}")
                return

            if 'op' in data:
                logger.debug(f"üì° –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ WebSocket: {data}")
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–µ–π
            if data.get('topic', '').startswith('kline.1.'):
                await self._handle_kline_data(data)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            if (datetime.now(timezone.utc) - self.last_stats_log).total_seconds() > 300:
                logger.info(f"üìä WebSocket —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.messages_received} —Å–æ–æ–±—â–µ–Ω–∏–π, "
                           f"–ø–æ–¥–ø–∏—Å–∞–Ω–æ –Ω–∞ {len(self.subscribed_pairs)} –ø–∞—Ä")

        except json.JSONDecodeError as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –æ—Ç WebSocket: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def _handle_kline_data(self, data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π"""
        try:
            kline_data = data['data'][0]
            symbol = data['topic'].split('.')[-1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏–º–≤–æ–ª –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
            if symbol not in self.trading_pairs:
                logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–º–≤–æ–ª–∞ {symbol}, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ watchlist")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª –≤ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ
            if symbol in self.subscription_pending:
                self.subscription_pending.remove(symbol)
            self.subscribed_pairs.add(symbol)

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Ç–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            # (—ç—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ)

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            start_time_ms = int(kline_data['start'])
            end_time_ms = int(kline_data['end'])
            is_closed = kline_data.get('confirm', False)

            # –î–ª—è –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–≤–µ—á–µ–π –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ –º–∏–Ω—É—Ç
            if is_closed:
                start_time_ms = (start_time_ms // 60000) * 60000
                end_time_ms = (end_time_ms // 60000) * 60000

            formatted_data = {
                'start': start_time_ms,
                'end': end_time_ms,
                'open': kline_data['open'],
                'high': kline_data['high'],
                'low': kline_data['low'],
                'close': kline_data['close'],
                'volume': kline_data['volume'],
                'confirm': is_closed
            }

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–≤–µ—á–∏
            if is_closed:
                await self._process_closed_candle(symbol, formatted_data)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º
            await self._send_kline_update(symbol, formatted_data, is_closed)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ kline –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def _process_closed_candle(self, symbol: str, formatted_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏"""
        try:
            start_time_ms = formatted_data['start']

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            last_processed = self.processed_candles.get(symbol, 0)
            if start_time_ms > last_processed:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤
                if self.alert_manager:
                    await self.alert_manager.process_kline_data(symbol, formatted_data)

                # –ü–æ–º–µ—á–∞–µ–º —Å–≤–µ—á—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
                self.processed_candles[symbol] = start_time_ms

                logger.debug(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞—è —Å–≤–µ—á–∞ {symbol} –≤ {start_time_ms}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫—Ä—ã—Ç–æ–π —Å–≤–µ—á–∏ –¥–ª—è {symbol}: {e}")

    async def _send_kline_update(self, symbol: str, formatted_data: Dict, is_closed: bool):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞–º"""
        try:
            if self.connection_manager:
                stream_item = {
                    "type": "kline_update",
                    "symbol": symbol,
                    "data": formatted_data,
                    "timestamp": datetime.now(timezone.utc).isoformat(),
                    "is_closed": is_closed,
                    "streaming_active": self.streaming_active,
                    "server_timestamp": int(datetime.now(timezone.utc).timestamp() * 1000)
                }

                await self.connection_manager.broadcast_json(stream_item)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è kline: {e}")

    async def _send_connection_status(self, status: str, reason: str = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            if self.connection_manager:
                status_data = {
                    "type": "connection_status",
                    "status": status,
                    "pairs_count": len(self.trading_pairs),
                    "subscribed_count": len(self.subscribed_pairs),
                    "pending_count": len(self.subscription_pending),
                    "streaming_active": self.streaming_active,
                    "timestamp": datetime.now(timezone.utc).isoformat()
                }

                if reason:
                    status_data["reason"] = reason

                await self.connection_manager.broadcast_json(status_data)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

    async def _monitor_connection(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        connection_start_time = datetime.now(timezone.utc)

        while self.is_running and self.websocket_connected:
            try:
                await asyncio.sleep(30)

                if not self.websocket_connected:
                    break

                current_time = datetime.now(timezone.utc)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                if self.last_message_time:
                    time_since_last_message = (current_time - self.last_message_time).total_seconds()

                    if time_since_last_message > 90:
                        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç WebSocket —É–∂–µ {time_since_last_message:.0f} —Å–µ–∫—É–Ω–¥")

                        await self._send_connection_status(
                            "warning", 
                            f"No messages for {time_since_last_message:.0f} seconds"
                        )

                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                        if time_since_last_message > 120:
                            logger.error("‚ùå –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
                            self.streaming_active = False
                            break

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                connection_duration = (current_time - connection_start_time).total_seconds()
                if connection_duration > self.connection_stable_time:
                    self.reconnect_attempts = 0

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
                break

    def update_trading_pairs(self, new_pairs: Set[str], removed_pairs: Set[str]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        self.trading_pairs.update(new_pairs)
        self.trading_pairs -= removed_pairs

    async def subscribe_to_new_pairs(self, new_pairs: Set[str]):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ –ø–∞—Ä—ã"""
        if new_pairs and self.websocket_connected:
            await self._subscribe_to_pairs(new_pairs)

    async def unsubscribe_from_pairs(self, removed_pairs: Set[str]):
        """–û—Ç–ø–∏—Å–∫–∞ –æ—Ç –ø–∞—Ä"""
        if removed_pairs and self.websocket_connected:
            try:
                unsubscribe_message = {
                    "op": "unsubscribe",
                    "args": [f"kline.1.{pair}" for pair in removed_pairs]
                }
                await self.websocket.send(json.dumps(unsubscribe_message))
                logger.info(f"üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {len(removed_pairs)} –ø–∞—Ä")

                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫
                self.subscribed_pairs -= removed_pairs

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç –ø–∞—Ä: {e}")

    def get_connection_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return {
            'websocket_connected': self.websocket_connected,
            'streaming_active': self.streaming_active,
            'total_pairs': len(self.trading_pairs),
            'subscribed_pairs': len(self.subscribed_pairs),
            'pending_pairs': len(self.subscription_pending),
            'messages_received': self.messages_received,
            'reconnect_attempts': self.reconnect_attempts,
            'last_message_time': self.last_message_time.isoformat() if self.last_message_time else None
        }

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        self.is_running = False
        self.websocket_connected = False
        self.streaming_active = False

        if self.ping_task:
            self.ping_task.cancel()
            try:
                await self.ping_task
            except asyncio.CancelledError:
                pass

        if self.websocket:
            try:
                await self.websocket.close()
            except Exception as e:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebSocket: {e}")

        logger.info("üõë WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")