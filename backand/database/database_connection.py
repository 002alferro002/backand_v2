import asyncio
import psycopg2
from psycopg2.extras import RealDictCursor
from psycopg2.pool import ThreadedConnectionPool
from typing import Optional, Dict, Any
from contextlib import contextmanager
from cryptoscan.backand.core.core_logger import get_logger
from cryptoscan.backand.core.core_exceptions import DatabaseException
from cryptoscan.backand.settings import get_setting

logger = get_logger(__name__)


class DatabaseConnection:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.connection_pool: Optional[ThreadedConnectionPool] = None
        self.connection: Optional[psycopg2.extensions.connection] = None
        self._is_initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        if self._is_initialized:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            db_config = self._get_db_config()
            
            # –°–æ–∑–¥–∞–µ–º –ø—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            self.connection_pool = ThreadedConnectionPool(
                minconn=1,
                maxconn=20,
                **db_config
            )
            
            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.connection = self.connection_pool.getconn()
            self.connection.autocommit = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await self._test_connection()
            
            self._is_initialized = True
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise DatabaseException(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _get_db_config(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DATABASE_URL
        database_url = get_setting('DATABASE_URL')
        if database_url and database_url != 'postgresql://user:password@localhost:5432/cryptoscan':
            return {'dsn': database_url}
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        return {
            'host': get_setting('DB_HOST', 'localhost'),
            'port': get_setting('DB_PORT', 5432),
            'database': get_setting('DB_NAME', 'cryptoscan'),
            'user': get_setting('DB_USER', 'user'),
            'password': get_setting('DB_PASSWORD', 'password'),
            'cursor_factory': RealDictCursor
        }
    
    async def _test_connection(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            cursor = self.connection.cursor()
            cursor.execute("SELECT 1")
            result = cursor.fetchone()
            cursor.close()
            
            if not result:
                raise DatabaseException("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–µ–ª")
                
        except Exception as e:
            raise DatabaseException(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    @contextmanager
    def get_cursor(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ—Ä–∞"""
        if not self._is_initialized:
            raise DatabaseException("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        cursor = None
        try:
            cursor = self.connection.cursor()
            yield cursor
        except Exception as e:
            if cursor:
                cursor.close()
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–æ—Ä–æ–º: {e}")
            raise DatabaseException(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            if cursor:
                cursor.close()
    
    @contextmanager
    def get_connection_from_pool(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞"""
        if not self.connection_pool:
            raise DatabaseException("–ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        conn = None
        try:
            conn = self.connection_pool.getconn()
            yield conn
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏–∑ –ø—É–ª–∞: {e}")
            raise DatabaseException(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        finally:
            if conn:
                self.connection_pool.putconn(conn)
    
    async def execute_query(self, query: str, params: tuple = None) -> list:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SELECT –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            with self.get_cursor() as cursor:
                cursor.execute(query, params)
                return cursor.fetchall()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise DatabaseException(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
    
    async def execute_command(self, command: str, params: tuple = None) -> int:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ INSERT/UPDATE/DELETE –∫–æ–º–∞–Ω–¥—ã"""
        try:
            with self.get_cursor() as cursor:
                cursor.execute(command, params)
                return cursor.rowcount
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            raise DatabaseException(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    async def execute_command_with_return(self, command: str, params: tuple = None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏—è"""
        try:
            with self.get_cursor() as cursor:
                cursor.execute(command, params)
                return cursor.fetchone()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º: {e}")
            raise DatabaseException(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        try:
            if self.connection:
                self.connection.close()
                self.connection = None
            
            if self.connection_pool:
                self.connection_pool.closeall()
                self.connection_pool = None
            
            self._is_initialized = False
            logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {e}")
    
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        try:
            if not self.connection or self.connection.closed:
                return False
            
            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            cursor = self.connection.cursor()
            cursor.execute("SELECT 1")
            cursor.fetchone()
            cursor.close()
            return True
            
        except Exception:
            return False
    
    async def reconnect(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        self.close()
        await self.initialize()