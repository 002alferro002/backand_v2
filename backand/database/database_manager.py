from cryptoscan.backand.core.core_logger import get_logger
from cryptoscan.backand.core.core_exceptions import DatabaseException
from cryptoscan.backand.database.database_connection import DatabaseConnection
from cryptoscan.backand.database.database_tables import DatabaseTables
from cryptoscan.backand.database.database_queries import DatabaseQueries

logger = get_logger(__name__)


class DatabaseManager:
    """–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.db_connection = None
        self.db_tables = None
        self.db_queries = None
        self._is_initialized = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        if self._is_initialized:
            return
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.db_connection = DatabaseConnection()
            await self.db_connection.initialize()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü
            self.db_tables = DatabaseTables(self.db_connection)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
            self.db_queries = DatabaseQueries(self.db_connection)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            await self.db_tables.create_all_tables()
            
            self._is_initialized = True
            logger.info("‚úÖ DatabaseManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DatabaseManager: {e}")
            raise DatabaseException(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
        if self.db_connection:
            self.db_connection.close()
        self._is_initialized = False
        logger.info("üîå DatabaseManager –∑–∞–∫—Ä—ã—Ç")
    
    def is_initialized(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return self._is_initialized
    
    async def get_watchlist(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ watchlist"""
        if not self._is_initialized:
            raise DatabaseException("DatabaseManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return await self.db_queries.get_watchlist()
    
    async def add_to_watchlist(self, symbol: str, price_drop: float = 0, 
                              current_price: float = 0, historical_price: float = 0):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ watchlist"""
        if not self._is_initialized:
            raise DatabaseException("DatabaseManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return await self.db_queries.add_to_watchlist(symbol, price_drop, current_price, historical_price)
    
    async def remove_from_watchlist(self, symbol: str = None, item_id: int = None):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ watchlist"""
        if not self._is_initialized:
            raise DatabaseException("DatabaseManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return await self.db_queries.remove_from_watchlist(symbol, item_id)