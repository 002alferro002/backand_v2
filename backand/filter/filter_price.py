import asyncio
from typing import List, Dict, Set
from datetime import datetime, timezone
from cryptoscan.backand.core.core_logger import get_logger
from cryptoscan.backand.core.core_exceptions import APIException
from cryptoscan.backand.bybit.bybit_rest_api import BybitRestAPI
from cryptoscan.backand.settings import get_setting

logger = get_logger(__name__)


class PriceFilter:
    """–§–∏–ª—å—Ç—Ä —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ü–µ–Ω—ã"""

    def __init__(self, db_manager):
        self.db_manager = db_manager
        self.bybit_api = BybitRestAPI()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
        self.price_history_days = get_setting('PRICE_HISTORY_DAYS', 1000)
        self.price_drop_percentage = get_setting('PRICE_DROP_PERCENTAGE', 10.0)
        self.pairs_check_interval_minutes = get_setting('PAIRS_CHECK_INTERVAL_MINUTES', 30)
        self.watchlist_auto_update = get_setting('WATCHLIST_AUTO_UPDATE', True)

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.on_pairs_updated_callback = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        if not self.watchlist_auto_update:
            logger.info("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ watchlist –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            return

        self.is_running = True
        logger.info("üîç –ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –ø–æ —Ü–µ–Ω–µ")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API
        await self.bybit_api.start()

        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        await self.update_watchlist()

        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        while self.is_running:
            try:
                await asyncio.sleep(self.pairs_check_interval_minutes * 60)

                if self.is_running:
                    logger.info(
                        f"üîÑ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–∫–∞–∂–¥—ã–µ {self.pairs_check_interval_minutes} –º–∏–Ω)")
                    await self.update_watchlist()
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ watchlist: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        self.is_running = False
        await self.bybit_api.stop()
        logger.info("üõë –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def set_pairs_updated_callback(self, callback):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö"""
        self.on_pairs_updated_callback = callback

    async def get_perpetual_pairs(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–µ—Å—Å—Ä–æ—á–Ω—ã—Ö —Ñ—å—é—á–µ—Ä—Å–Ω—ã—Ö –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"""
        try:
            return await self.bybit_api.get_perpetual_pairs()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")
            return []

    async def analyze_price_changes(self, symbols: List[str]) -> Dict[str, Dict]:
        """–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤"""
        results = {}

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –ø–∞–∫–µ—Ç–∞–º–∏
        batch_size = 10
        for i in range(0, len(symbols), batch_size):
            batch = symbols[i:i + batch_size]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –ø–∞–∫–µ—Ç–æ–º
            current_prices = await self.bybit_api.batch_get_current_prices(batch)

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            for symbol in batch:
                try:
                    current_price = current_prices.get(symbol, 0)
                    if current_price <= 0:
                        continue

                    historical_price = await self.bybit_api.get_historical_price(
                        symbol, self.price_history_days
                    )

                    if historical_price > 0:
                        price_drop = ((historical_price - current_price) / historical_price) * 100

                        results[symbol] = {
                            'current_price': current_price,
                            'historical_price': historical_price,
                            'price_drop': price_drop,
                            'meets_criteria': price_drop >= self.price_drop_percentage
                        }

                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    await asyncio.sleep(0.1)

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω—ã –¥–ª—è {symbol}: {e}")
                    continue

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
            if i + batch_size < len(symbols):
                await asyncio.sleep(1)

        return results

    async def update_watchlist(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ watchlist –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Ü–µ–Ω—ã"""
        if not self.watchlist_auto_update:
            logger.debug("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ watchlist –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            return []

        try:
            logger.info("üîç –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è watchlist...")

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
            all_pairs = await self.get_perpetual_pairs()
            if not all_pairs:
                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä")
                return []

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π watchlist
            current_watchlist = await self.db_manager.get_watchlist()

            logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ {len(all_pairs)} —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä...")

            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
            price_analysis = await self.analyze_price_changes(all_pairs)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π watchlist
            new_watchlist = []
            added_count = 0
            removed_count = 0
            new_pairs = set()

            for symbol, analysis in price_analysis.items():
                if analysis['meets_criteria']:
                    new_watchlist.append(symbol)

                    if symbol not in current_watchlist:
                        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–∞—Ä—É
                        await self.db_manager.add_to_watchlist(
                            symbol,
                            analysis['price_drop'],
                            analysis['current_price'],
                            analysis['historical_price']
                        )
                        added_count += 1
                        new_pairs.add(symbol)
                        logger.info(
                            f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–∞—Ä–∞ {symbol} –≤ watchlist (–ø–∞–¥–µ–Ω–∏–µ —Ü–µ–Ω—ã: {analysis['price_drop']:.2f}%)")

            # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            for symbol in current_watchlist:
                if symbol not in new_watchlist:
                    await self.db_manager.remove_from_watchlist(symbol)
                    removed_count += 1
                    logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω–∞ –ø–∞—Ä–∞ {symbol} –∏–∑ watchlist (–Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º)")

            logger.info(f"‚úÖ Watchlist –æ–±–Ω–æ–≤–ª–µ–Ω: {len(new_watchlist)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä (+{added_count}, -{removed_count})")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö —á–µ—Ä–µ–∑ callback
            if new_pairs and self.on_pairs_updated_callback:
                logger.info(f"üì¢ –£–≤–µ–¥–æ–º–ª—è–µ–º –æ {len(new_pairs)} –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö —á–µ—Ä–µ–∑ callback")
                try:
                    await self.on_pairs_updated_callback(new_pairs, set())
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ callback –¥–ª—è –Ω–æ–≤—ã—Ö –ø–∞—Ä: {e}")

            return new_watchlist

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è watchlist: {e}")
            return []

    async def get_price_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ü–µ–Ω–∞–º"""
        try:
            watchlist = await self.db_manager.get_watchlist_details()

            if not watchlist:
                return {
                    'total_pairs': 0,
                    'average_drop': 0,
                    'max_drop': 0,
                    'min_drop': 0
                }

            drops = [pair['price_drop'] for pair in watchlist if pair['price_drop']]

            return {
                'total_pairs': len(watchlist),
                'average_drop': sum(drops) / len(drops) if drops else 0,
                'max_drop': max(drops) if drops else 0,
                'min_drop': min(drops) if drops else 0,
                'pairs_with_data': len(drops)
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ü–µ–Ω: {e}")
            return {
                'total_pairs': 0,
                'average_drop': 0,
                'max_drop': 0,
                'min_drop': 0,
                'error': str(e)
            }

    def update_settings(self, new_settings: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–∞"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –∏–ª–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        from cryptoscan.backand.settings import get_setting

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if 'PRICE_HISTORY_DAYS' in new_settings:
            try:
                self.price_history_days = int(new_settings['PRICE_HISTORY_DAYS'])
            except (ValueError, TypeError):
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PRICE_HISTORY_DAYS: {new_settings['PRICE_HISTORY_DAYS']}")
        
        if 'PRICE_DROP_PERCENTAGE' in new_settings:
            try:
                self.price_drop_percentage = float(new_settings['PRICE_DROP_PERCENTAGE'])
            except (ValueError, TypeError):
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PRICE_DROP_PERCENTAGE: {new_settings['PRICE_DROP_PERCENTAGE']}")
        
        if 'PAIRS_CHECK_INTERVAL_MINUTES' in new_settings:
            try:
                self.pairs_check_interval_minutes = int(new_settings['PAIRS_CHECK_INTERVAL_MINUTES'])
            except (ValueError, TypeError):
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ PAIRS_CHECK_INTERVAL_MINUTES: {new_settings['PAIRS_CHECK_INTERVAL_MINUTES']}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è watchlist
        old_auto_update = self.watchlist_auto_update
        if 'WATCHLIST_AUTO_UPDATE' in new_settings:
            try:
                self.watchlist_auto_update = bool(new_settings['WATCHLIST_AUTO_UPDATE']) if isinstance(new_settings['WATCHLIST_AUTO_UPDATE'], bool) else str(new_settings['WATCHLIST_AUTO_UPDATE']).lower() == 'true'
            except (ValueError, TypeError):
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ WATCHLIST_AUTO_UPDATE: {new_settings['WATCHLIST_AUTO_UPDATE']}")

        # –ï—Å–ª–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –≤–∫–ª—é—á–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
        if not old_auto_update and self.watchlist_auto_update and not self.is_running:
            import asyncio
            asyncio.create_task(self.start())
            logger.info("üîç –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ watchlist –≤–∫–ª—é—á–µ–Ω–æ - –∑–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞")

        # –ï—Å–ª–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
        elif old_auto_update and not self.watchlist_auto_update and self.is_running:
            self.is_running = False
            logger.info("üõë –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ watchlist –æ—Ç–∫–ª—é—á–µ–Ω–æ - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞")

        logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    def get_settings(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        return {
            'price_history_days': self.price_history_days,
            'price_drop_percentage': self.price_drop_percentage,
            'pairs_check_interval_minutes': self.pairs_check_interval_minutes,
            'watchlist_auto_update': self.watchlist_auto_update
        }