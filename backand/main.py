import asyncio
import uvicorn
from fastapi import FastAPI, WebSocket, WebSocketDisconnect
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
from cryptoscan.backand.core.core_logger import get_logger
from cryptoscan.backand.database.database_manager import DatabaseManager
from cryptoscan.backand.alert.alert_manager import AlertManager
from cryptoscan.backand.bybit.bybit_websocket import BybitWebSocketManager
from cryptoscan.backand.filter.filter_price import PriceFilter
from cryptoscan.backand.telegram.telegram_bot import TelegramBot
from cryptoscan.backand.times.times_manager import TimeManager
from cryptoscan.backand.websocket.websocket_manager import ConnectionManager
from cryptoscan.backand.settings import (
    get_setting, 
    start_settings_monitor, 
    stop_settings_monitor,
    set_main_event_loop,
    register_settings_callback
)

# –ò–º–ø–æ—Ä—Ç—ã API —Ä–æ—É—Ç–µ—Ä–æ–≤
from cryptoscan.backand.api.api_alerts import setup_alerts_routes
from cryptoscan.backand.api.api_favorites import setup_favorites_routes
from cryptoscan.backand.api.api_kline import setup_kline_routes
from cryptoscan.backand.api.api_trading import setup_trading_routes
from cryptoscan.backand.api.api_watchlist import setup_watchlist_routes
from cryptoscan.backand.api.api_startup import setup_startup_routes

logger = get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
database_manager = None
alert_manager = None
bybit_websocket = None
price_filter = None
telegram_bot = None
time_manager = None
connection_manager = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ CryptoScan...")
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—ã–π event loop
        set_main_event_loop(asyncio.get_event_loop())
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await initialize_components()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        start_settings_monitor()
        
        logger.info("‚úÖ CryptoScan —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        yield
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        raise
    finally:
        # Shutdown
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ CryptoScan...")
        
        try:
            await shutdown_components()
            stop_settings_monitor()
            logger.info("‚úÖ CryptoScan —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")


async def initialize_components():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    global database_manager, alert_manager, bybit_websocket, price_filter
    global telegram_bot, time_manager, connection_manager
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        database_manager = DatabaseManager()
        await database_manager.initialize()
        
        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
        logger.info("‚è∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏...")
        time_manager = TimeManager()
        await time_manager.start()
        
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        logger.info("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
        connection_manager = ConnectionManager()
        
        # 4. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        logger.info("üì± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞...")
        telegram_bot = TelegramBot()
        
        # 5. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤
        logger.info("üö® –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤...")
        alert_manager = AlertManager(
            db_queries=database_manager.db_queries,
            telegram_bot=telegram_bot,
            connection_manager=connection_manager,
            time_manager=time_manager
        )
        
        # 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω
        logger.info("üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω...")
        price_filter = PriceFilter(database_manager)
        
        # 7. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit WebSocket
        logger.info("üì° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit WebSocket...")
        bybit_websocket = BybitWebSocketManager(alert_manager, connection_manager)
        
        # 8. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
        price_filter.set_pairs_updated_callback(handle_pairs_updated)
        
        # 9. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        register_settings_callback(handle_settings_update)
        
        # 10. –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        await start_background_tasks()
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        raise


async def start_background_tasks():
    """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á"""
    try:
        # –ó–∞–ø—É—Å–∫ —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω
        asyncio.create_task(price_filter.start())
        
        # –ó–∞–ø—É—Å–∫ Bybit WebSocket
        asyncio.create_task(start_bybit_websocket())
        
        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        asyncio.create_task(periodic_cleanup())
        
        logger.info("‚úÖ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∑–∞–ø—É—â–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á: {e}")


async def start_bybit_websocket():
    """–ó–∞–ø—É—Å–∫ Bybit WebSocket —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    max_retries = 5
    retry_delay = 10
    
    for attempt in range(max_retries):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
            watchlist = await database_manager.get_watchlist()
            
            if watchlist:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –≤ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–µ
                bybit_websocket.update_trading_pairs(set(watchlist), set())
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket
                bybit_websocket.is_running = True
                await bybit_websocket.connect()
            else:
                logger.warning("‚ö†Ô∏è Watchlist –ø—É—Å—Ç, WebSocket –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                break
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Bybit WebSocket (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            
            if attempt < max_retries - 1:
                logger.info(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(retry_delay)
                retry_delay *= 2  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            else:
                logger.error("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–ø—É—Å–∫–∞ WebSocket")


async def periodic_cleanup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            
            if alert_manager:
                await alert_manager.cleanup_old_data()
                
            logger.info("üßπ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")
            await asyncio.sleep(300)  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ


async def handle_pairs_updated(new_pairs: set, removed_pairs: set):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    try:
        if bybit_websocket and bybit_websocket.is_running:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –≤ WebSocket
            bybit_websocket.update_trading_pairs(new_pairs, removed_pairs)
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ –ø–∞—Ä—ã
            if new_pairs:
                await bybit_websocket.subscribe_to_new_pairs(new_pairs)
                logger.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {len(new_pairs)} –Ω–æ–≤—ã—Ö –ø–∞—Ä")
            
            # –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –ø–∞—Ä
            if removed_pairs:
                await bybit_websocket.unsubscribe_from_pairs(removed_pairs)
                logger.info(f"üì° –û—Ç–ø–∏—Å–∫–∞ –æ—Ç {len(removed_pairs)} –ø–∞—Ä")
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä: {e}")


async def handle_settings_update(new_settings: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        if alert_manager:
            alert_manager.update_settings(new_settings)
            
        if price_filter:
            price_filter.update_settings(new_settings)
            
        if telegram_bot:
            telegram_bot.update_settings(
                new_settings.get('TELEGRAM_BOT_TOKEN'),
                new_settings.get('TELEGRAM_CHAT_ID')
            )
            
        logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")


async def shutdown_components():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    global database_manager, alert_manager, bybit_websocket, price_filter
    global telegram_bot, time_manager, connection_manager
    
    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket
        if bybit_websocket:
            await bybit_websocket.close()
            
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Ü–µ–Ω
        if price_filter:
            await price_filter.stop()
            
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
        if time_manager:
            await time_manager.stop()
            
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if database_manager:
            await database_manager.close()
            
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")


# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="CryptoScan API",
    description="API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
    version="1.0.0",
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# API —Ä–æ—É—Ç—ã
@app.get("/api/stats")
async def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        stats = {
            "status": "running",
            "components": {
                "database": database_manager.is_initialized() if database_manager else False,
                "websocket": bybit_websocket.websocket_connected if bybit_websocket else False,
                "alerts": alert_manager is not None,
                "price_filter": price_filter is not None,
                "telegram": telegram_bot.enabled if telegram_bot else False,
                "time_sync": time_manager.is_time_synced() if time_manager else False
            }
        }
        
        if connection_manager:
            stats["websocket_connections"] = connection_manager.get_connection_count()
            
        if bybit_websocket:
            stats["bybit_connection"] = bybit_websocket.get_connection_stats()
            
        return stats
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {"status": "error", "error": str(e)}


@app.get("/api/time")
async def get_time_info():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        if time_manager:
            return time_manager.get_time_info()
        else:
            return {
                "error": "TimeManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω",
                "status": "not_available"
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return {"error": str(e), "status": "error"}


@app.get("/api/settings")
async def get_settings():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        settings = {}
        
        if alert_manager:
            settings["volume_analyzer"] = alert_manager.get_settings()
            
        if price_filter:
            settings["price_filter"] = price_filter.get_settings()
            
        if time_manager:
            settings["time_sync"] = time_manager.get_sync_status()
            
        if telegram_bot:
            settings["telegram"] = telegram_bot.get_status()
            
        return settings
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return {"error": str(e)}


@app.post("/api/settings")
async def update_settings(new_settings: dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        from cryptoscan.backand.settings import update_multiple_settings
        
        success, errors = update_multiple_settings(new_settings)
        
        if success:
            return {"success": True, "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"}
        else:
            return {"success": False, "errors": errors}
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return {"success": False, "error": str(e)}


# WebSocket endpoint
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    if not connection_manager:
        await websocket.close(code=1000, reason="Connection manager not available")
        return
        
    await connection_manager.connect(websocket)
    
    try:
        while True:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            message = await websocket.receive_text()
            await connection_manager.handle_client_message(websocket, message)
            
    except WebSocketDisconnect:
        connection_manager.disconnect(websocket)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ WebSocket: {e}")
        connection_manager.disconnect(websocket)


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API —Ä–æ—É—Ç–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
@app.on_event("startup")
async def setup_routes():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ API —Ä–æ—É—Ç–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    try:
        # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        await asyncio.sleep(1)
        
        if database_manager and database_manager.db_queries:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã
            app.include_router(setup_alerts_routes(database_manager.db_queries))
            app.include_router(setup_favorites_routes(database_manager.db_queries))
            app.include_router(setup_kline_routes(database_manager.db_queries))
            app.include_router(setup_trading_routes(database_manager.db_queries))
            app.include_router(setup_watchlist_routes(database_manager.db_queries))
            app.include_router(setup_startup_routes(
                database_manager.db_queries, 
                alert_manager, 
                price_filter
            ))
            
            logger.info("‚úÖ API —Ä–æ—É—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å API —Ä–æ—É—Ç—ã - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API —Ä–æ—É—Ç–µ—Ä–æ–≤: {e}")


# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
app.mount("/static", StaticFiles(directory="static"), name="static")


@app.get("/")
async def read_root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        return FileResponse("static/index.html")
    except Exception:
        return {"message": "CryptoScan API", "status": "running"}


if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    host = get_setting('SERVER_HOST', '0.0.0.0')
    port = int(get_setting('SERVER_PORT', 8000))
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ {host}:{port}")
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=False,
        log_level="info"
    )