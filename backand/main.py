ET', '')

        if not api_key or not api_secret:
            raise HTTPException(status_code=400, detail="API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ Bybit API
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return {
            "status": "success",
            "order_id": "mock_order_123",
            "message": "–°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (demo —Ä–µ–∂–∏–º)"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/trading/test-connection")
async def test_trading_connection(credentials: dict):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É API"""
    try:
        api_key = credentials.get('api_key')
        api_secret = credentials.get('api_secret')

        if not api_key or not api_secret:
            raise HTTPException(status_code=400, detail="API –∫–ª—é—á–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return {
            "success": True,
            "balance": 10000.0,
            "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (demo —Ä–µ–∂–∏–º)"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/settings/schema")
async def get_settings_schema_endpoint():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ —Ç–∏–ø–∞–º–∏"""
    try:
        schema = get_settings_schema()
        return {"schema": schema}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
async def update_all_components_settings(new_settings: Dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö...")

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ alert_manager
        if alert_manager:
            alert_manager.update_settings(new_settings)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ price_filter
        if price_filter:
            price_filter.update_settings(new_settings)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ telegram_bot
        if telegram_bot:
            telegram_token = new_settings.get('TELEGRAM_BOT_TOKEN')
            telegram_chat = new_settings.get('TELEGRAM_CHAT_ID')
            if telegram_token or telegram_chat:
                telegram_bot.update_settings(telegram_token, telegram_chat)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω–∞–ª–∏–∑–∞
        if db_queries and any(key in new_settings for key in ['ANALYSIS_HOURS', 'OFFSET_MINUTES']):
            try:
                await correct_data_for_settings_change(new_settings)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if connection_manager:
            await connection_manager.broadcast_json({
                "type": "settings_updated",
                "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞",
                "timestamp": int(datetime.now(timezone.utc).timestamp() * 1000)
            })

        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö: {e}")


async def correct_data_for_settings_change(new_settings: Dict):
    """–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        analysis_hours = safe_convert_to_int(new_settings.get('ANALYSIS_HOURS', get_setting('ANALYSIS_HOURS', 1)))
        offset_minutes = safe_convert_to_int(new_settings.get('OFFSET_MINUTES', get_setting('OFFSET_MINUTES', 0)))
        
        logger.info(f"üîß –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: ANALYSIS_HOURS={analysis_hours}, OFFSET_MINUTES={offset_minutes}")
        
        # –ü–æ–ª—É—á–∞–µ–º watchlist
        watchlist = await db_queries.get_watchlist()
        if not watchlist:
            logger.info("üìã Watchlist –ø—É—Å—Ç - –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ –Ω–∞—á–∞–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        if connection_manager:
            await connection_manager.broadcast_json({
                "type": "data_correction_started",
                "symbols_count": len(watchlist),
                "analysis_hours": analysis_hours,
                "offset_minutes": offset_minutes,
                "timestamp": int(datetime.now(timezone.utc).timestamp() * 1000)
            })
        
        corrected_count = 0
        for symbol in watchlist:
            try:
                result = await db_queries.adjust_data_for_new_settings(symbol, analysis_hours, offset_minutes)
                
                if result.get('actions_taken'):
                    corrected_count += 1
                    logger.info(f"üìä –î–∞–Ω–Ω—ã–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {symbol}: {result['actions_taken']}")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                    if connection_manager:
                        await connection_manager.broadcast_json({
                            "type": "data_correction_progress",
                            "symbol": symbol,
                            "actions": result['actions_taken'],
                            "timestamp": int(datetime.now(timezone.utc).timestamp() * 1000)
                        })
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏
                await asyncio.sleep(0.1)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                continue
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if connection_manager:
            await connection_manager.broadcast_json({
                "type": "data_correction_completed",
                "corrected_symbols": corrected_count,
                "total_symbols": len(watchlist),
                "timestamp": int(datetime.now(timezone.utc).timestamp() * 1000)
            })
        
        logger.info(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {corrected_count}/{len(watchlist)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        if connection_manager:
            await connection_manager.broadcast_json({
                "type": "data_correction_error",
                "error": str(e),
                "timestamp": int(datetime.now(timezone.utc).timestamp() * 1000)
            })


def safe_convert_to_int(value, default: int = 0) -> int:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ int"""
    try:
        if isinstance(value, (int, float)):
            return int(value)
        elif isinstance(value, str):
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ float, –∑–∞—Ç–µ–º –≤ int
            return int(float(value))
        else:
            return default
    except (ValueError, TypeError):
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{value}' –≤ int, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default}")
        return default


def safe_convert_to_float(value, default: float = 0.0) -> float:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ float"""
    try:
        if isinstance(value, (int, float)):
            return float(value)
        elif isinstance(value, str):
            return float(value)
        else:
            return default
    except (ValueError, TypeError):
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å '{value}' –≤ float, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {default}")
        return default


@app.post("/api/settings")
async def update_settings(settings_update: SettingsUpdate):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    try:
        settings = settings_update.settings
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
        flat_settings = {}
        for key, value in settings.items():
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–π –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
            flat_settings[key] = value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
        success, errors = update_multiple_settings(flat_settings)
        
        if not success:
            return {
                "status": "error", 
                "message": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", 
                "errors": errors
            }

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Å–∏—Å—Ç–µ–º—ã
        await update_all_components_settings(flat_settings)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await connection_manager.broadcast_json({
            "type": "settings_updated",
            "status": "success",
            "data": settings,
            "timestamp": int(datetime.now(timezone.utc).timestamp() * 1000),
            "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            "system_restart_required": False  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        })
        
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ API")
        return {
            "status": "success", 
            "updated_count": len(flat_settings),
            "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            "applied_immediately": True
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        if connection_manager:
            await connection_manager.broadcast_json({
                "type": "settings_update_error",
                "error": str(e),
                "timestamp": int(datetime.now(timezone.utc).timestamp() * 1000)
            })
        
        return {
            "status": "error", 
            "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}", 
            "detail": str(e)
        }


@app.post("/api/settings/reset")
async def reset_settings(reset_data: SettingsReset):
    """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        if not reset_data.confirm:
            return {
                "status": "error",
                "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            }
        
        success = reset_settings_to_default()
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
            from settings import load_settings
            new_settings = load_settings()
            await update_all_components_settings(new_settings)
            
            if connection_manager:
                await connection_manager.broadcast_json({
                    "type": "settings_reset",
                    "status": "success",
                    "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                    "timestamp": int(datetime.now(timezone.utc).timestamp() * 1000)
                })
            
            return {
                "status": "success",
                "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            }
        else:
            return {
                "status": "error",
                "message": "–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}"
        }


@app.get("/api/settings/export")
async def export_settings_endpoint():
    """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        settings = export_settings()
        return {
            "status": "success",
            "settings": settings,
            "exported_at": datetime.now(timezone.utc).isoformat(),
            "count": len(settings)
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/settings/import")
async def import_settings_endpoint(import_data: SettingsImport):
    """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        success, errors = import_settings(import_data.settings)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
            await update_all_components_settings(import_data.settings)
            
            if connection_manager:
                await connection_manager.broadcast_json({
                    "type": "settings_imported",
                    "status": "success",
                    "count": len(import_data.settings),
                    "timestamp": int(datetime.now(timezone.utc).timestamp() * 1000)
                })
            
            return {
                "status": "success",
                "imported_count": len(import_data.settings),
                "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"
            }
        else:
            return {
                "status": "error",
                "message": "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                "errors": errors
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}"
        }


@app.delete("/api/watchlist/{symbol}")
async def remove_from_watchlist(symbol: str):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –∏–∑ watchlist"""
    try:
        if not db_queries:
            return {
                "status": "error",
                "message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            }
            
        await db_queries.remove_from_watchlist(symbol)

        # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É –∏–∑ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if bybit_websocket:
            bybit_websocket.trading_pairs.discard(symbol)
            await bybit_websocket.unsubscribe_from_pairs({symbol})

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await connection_manager.broadcast_json({
            "type": "watchlist_updated",
            "action": "removed",
            "symbol": symbol
        })

        return {"status": "success", "symbol": symbol}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ watchlist: {e}")
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ watchlist: {str(e)}"
        }


@app.post("/api/settings/reload")
async def reload_settings_endpoint():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    try:
        from settings import reload_settings, load_settings
        await reload_settings()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        new_settings = load_settings()
        await update_all_components_settings(new_settings)

        return {"status": "success", "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


class WatchlistAdd(BaseModel):
    symbol: str


# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist –ø–µ—Ä–µ–¥ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
if os.path.exists("dist"):
    if os.path.exists("dist/assets"):
        app.mount("/assets", StaticFiles(directory="dist/assets"), name="assets")


    @app.get("/vite.svg")
    async def get_vite_svg():
        if os.path.exists("dist/vite.svg"):
            return FileResponse("dist/vite.svg")
        raise HTTPException(status_code=404, detail="File not found")


    @app.get("/{full_path:path}")
    async def serve_spa(full_path: str):
        """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ SPA –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        if os.path.exists("dist/index.html"):
            return FileResponse("dist/index.html")
        raise HTTPException(status_code=404, detail="SPA not built")
else:
    @app.get("/")
    async def root():
        return {"message": "Frontend not built. Run 'npm run build' first."}

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    host = get_setting('SERVER_HOST', '0.0.0.0')
    port = get_setting('SERVER_PORT', 8000)

    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=False,
        log_level="info"
    )