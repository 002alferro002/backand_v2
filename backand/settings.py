import asyncio
import os
from datetime import datetime, timezone
from contextlib import asynccontextmanager
from typing import List, Dict, Optional, Any, Set, Union

from fastapi import FastAPI, HTTPException, WebSocket, WebSocketDisconnect
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import json

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from settings import get_setting, register_settings_callback, start_settings_monitor, stop_settings_monitor
from settings import (
    get_setting, register_settings_callback, start_settings_monitor, stop_settings_monitor,
    get_settings_schema, get_settings_by_category, reset_settings_to_default,
    export_settings, import_settings, update_multiple_settings, ENV_FILE_PATH
)
from core.core_logger import get_logger
from database.database_connection import DatabaseConnection
from database.database_tables import DatabaseTables
from database.database_queries import DatabaseQueries
from alert.alert_manager import AlertManager
from bybit.bybit_websocket import BybitWebSocketManager
from bybit.bybit_rest_api import BybitRestAPI
from filter.filter_price import PriceFilter
from telegram.telegram_bot import TelegramBot
from times.times_manager import TimeManager
from cryptoscan.backand.websocket.websocket_manager import ConnectionManager

logger = get_logger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
db_connection = None
db_queries = None
alert_manager = None
bybit_websocket = None
bybit_api = None
price_filter = None
telegram_bot = None
time_manager = None
connection_manager = None


# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
class SettingsUpdate(BaseModel):
    settings: Dict[str, Any]


class PaperTradeCreate(BaseModel):
    symbol: str
    alert_id: Optional[int] = None
    direction: str  # 'LONG' or 'SHORT'
    entry_price: float
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    quantity: Optional[float] = None
    risk_amount: Optional[float] = None
    risk_percentage: Optional[float] = None
    position_value: Optional[float] = None
    potential_loss: Optional[float] = None
    potential_profit: Optional[float] = None
    risk_reward_ratio: Optional[float] = None
    status: str = 'planned'
    notes: Optional[str] = None


class RealTradeCreate(BaseModel):
    symbol: str
    alert_id: Optional[int] = None
    side: str  # 'BUY' or 'SELL'
    direction: str  # 'LONG' or 'SHORT'
    quantity: float
    entry_price: float
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    leverage: int = 1
    margin_type: str = 'isolated'
    risk_amount: Optional[float] = None
    risk_percentage: Optional[float] = None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
async def update_all_components_settings(new_settings: Dict):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Å–∏—Å—Ç–µ–º—ã"""
    try:
        logger.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö...")

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ alert_manager
        if alert_manager:
            alert_manager.update_settings(new_settings)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ price_filter
        if price_filter:
            price_filter.update_settings(new_settings)

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ telegram_bot
        if telegram_bot:
            telegram_token = new_settings.get('TELEGRAM_BOT_TOKEN')
            telegram_chat = new_settings.get('TELEGRAM_CHAT_ID')
            if telegram_token or telegram_chat:
                telegram_bot.update_settings(telegram_token, telegram_chat)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if connection_manager:
            await connection_manager.broadcast_json({
                "type": "settings_updated",
                "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞",
                "timestamp": int(datetime.now(timezone.utc).timestamp() * 1000)
            })

        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö: {e}")


class WatchlistAdd(BaseModel):
    symbol: str


class WatchlistUpdate(BaseModel):
    id: int
    symbol: str
    is_active: bool


class FavoriteAdd(BaseModel):
    symbol: str
    notes: Optional[str] = None
    color: Optional[str] = '#FFD700'


class FavoriteUpdate(BaseModel):
    notes: Optional[str] = None
    color: Optional[str] = None
    sort_order: Optional[int] = None


class FavoriteReorder(BaseModel):
    symbol_order: List[str]


class PaperTradeCreate(BaseModel):
    symbol: str
    trade_type: str  # 'LONG' or 'SHORT'
    entry_price: float
    quantity: Optional[float] = None
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    risk_amount: Optional[float] = None
    risk_percentage: Optional[float] = None
    notes: Optional[str] = None
    alert_id: Optional[int] = None


class PaperTradeClose(BaseModel):
    exit_price: float
    exit_reason: Optional[str] = 'MANUAL'


class TradingSettingsUpdate(BaseModel):
    account_balance: Optional[float] = None
    max_risk_per_trade: Optional[float] = None
    max_open_trades: Optional[int] = None
    default_stop_loss_percentage: Optional[float] = None
    default_take_profit_percentage: Optional[float] = None
    auto_calculate_quantity: Optional[bool] = None


class SettingsSchema(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    pass


class SettingsImport(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    settings: Dict[str, Any]


class SettingsReset(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    confirm: bool = False


class SettingsUpdate(BaseModel):
    settings: Dict[str, Any]


class RiskCalculatorRequest(BaseModel):
    entry_price: float
    stop_loss: Optional[float] = None
    take_profit: Optional[float] = None
    risk_amount: Optional[float] = None
    risk_percentage: Optional[float] = None
    account_balance: Optional[float] = None
    trade_type: str = 'LONG'


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    global db_connection, db_queries, alert_manager, bybit_websocket, bybit_api
    global price_filter, telegram_bot, time_manager, connection_manager

    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–º–æ–≤...")

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
        from settings import create_env_file, load_settings
        create_env_file()  # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        initial_settings = load_settings()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        logger.info("‚úÖ –§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–∑–¥–∞–Ω/–∑–∞–≥—Ä—É–∂–µ–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        connection_manager = ConnectionManager()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        time_manager = TimeManager()
        await time_manager.start()
        logger.info("‚è∞ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—â–µ–Ω–∞")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        db_connection = None
        db_queries = None
        db_initialized = False
        
        try:
            db_connection = DatabaseConnection()
            await db_connection.initialize()

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
            db_tables = DatabaseTables(db_connection)
            await db_tables.create_all_tables()

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
            db_queries = DatabaseQueries(db_connection)
            db_initialized = True
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            
        except Exception as db_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_error}")
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç—É –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ WebSocket –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –ë–î
            if connection_manager:
                await connection_manager.send_system_notification(
                    "database_error",
                    {
                        "message": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                        "error": str(db_error),
                        "impact": "–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"
                    }
                )

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
        telegram_bot = TelegramBot()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–ª–µ—Ä—Ç–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±–µ–∑ –ë–î)
        alert_manager = AlertManager(db_queries, telegram_bot, connection_manager, time_manager)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit API
        bybit_api = BybitRestAPI()
        await bybit_api.start()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ —Ü–µ–Ω (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±–µ–∑ –ë–î)
        price_filter = PriceFilter(db_queries)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞ Bybit
        bybit_websocket = BybitWebSocketManager(alert_manager, connection_manager)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä
        async def on_pairs_updated(new_pairs, removed_pairs):
            """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä –≤ bybit_websocket"""
            if bybit_websocket:
                bybit_websocket.update_trading_pairs(new_pairs, removed_pairs)
                if new_pairs:
                    await bybit_websocket.subscribe_to_new_pairs(new_pairs)
                if removed_pairs:
                    await bybit_websocket.unsubscribe_from_pairs(removed_pairs)

        price_filter.set_pairs_updated_callback(on_pairs_updated)

        # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π watchlist (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞)
        if db_initialized and db_queries:
            try:
                initial_watchlist = await db_queries.get_watchlist()
                if initial_watchlist:
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –≤ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
                    bybit_websocket.trading_pairs = set(initial_watchlist)
                    logger.info(f"üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–π watchlist: {len(initial_watchlist)} –ø–∞—Ä")
                else:
                    logger.info("üìã Watchlist –ø—É—Å—Ç")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ watchlist: {e}")
        else:
            logger.warning("‚ö†Ô∏è Watchlist –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Ü–µ–Ω
        if get_setting('WATCHLIST_AUTO_UPDATE', True):
            if db_initialized:
                asyncio.create_task(price_filter.start())
            else:
                logger.warning("‚ö†Ô∏è –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ watchlist –æ—Ç–∫–ª—é—á–µ–Ω–æ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            logger.info("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ watchlist –æ—Ç–∫–ª—é—á–µ–Ω–æ")

        # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –∫–ª–∏–µ–Ω—Ç
        bybit_websocket.is_running = True
        asyncio.create_task(bybit_websocket_loop())

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞
        if db_initialized:
            asyncio.create_task(historical_data_loader())
        else:
            logger.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑—á–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")

        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        asyncio.create_task(periodic_cleanup())

        # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        asyncio.create_task(connection_manager.start_periodic_cleanup())

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        register_settings_callback(update_all_components_settings)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π .env —Ñ–∞–π–ª–∞
        start_settings_monitor()

        if db_initialized:
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –ø–æ–ª–Ω–æ–º —Ä–µ–∂–∏–º–µ!")
        else:
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ (–±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)")
            logger.info("üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ .env —Ñ–∞–π–ª–µ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        logger.error("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω–∞")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–ø—É—Å–∫ - –ø–æ–∑–≤–æ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–µ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        pass

    yield

    # Shutdown
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")

    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    stop_settings_monitor()

    if time_manager:
        await time_manager.stop()
    if bybit_websocket:
        bybit_websocket.is_running = False
        await bybit_websocket.close()
    if bybit_api:
        await bybit_api.stop()
    if price_filter:
        await price_filter.stop()
    if db_connection:
        db_connection.close()


async def bybit_websocket_loop():
    """–¶–∏–∫–ª WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è–º–∏"""
    while bybit_websocket.is_running:
        try:
            await bybit_websocket.connect()
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω—ã–º
            bybit_websocket.reconnect_attempts = 0

        except Exception as e:
            logger.error(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")

            if bybit_websocket.is_running:
                bybit_websocket.reconnect_attempts += 1

                if bybit_websocket.reconnect_attempts <= bybit_websocket.max_reconnect_attempts:
                    delay = min(bybit_websocket.reconnect_delay * bybit_websocket.reconnect_attempts, 60)
                    logger.info(f"üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥... "
                                f"(–ø–æ–ø—ã—Ç–∫–∞ {bybit_websocket.reconnect_attempts}/{bybit_websocket.max_reconnect_attempts})")
                    await asyncio.sleep(delay)
                else:
                    logger.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                    bybit_websocket.is_running = False
                    break


async def historical_data_loader():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not db_queries:
                logger.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑—á–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞
                continue
                
            if not bybit_api:
                logger.warning("‚ö†Ô∏è –ó–∞–≥—Ä—É–∑—á–∏–∫ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: Bybit API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                await asyncio.sleep(300)
                continue
                
            if db_queries and bybit_api:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π watchlist
                try:
                    watchlist = await db_queries.get_watchlist()
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è watchlist: {e}")
                    await asyncio.sleep(300)
                    continue

                for symbol in watchlist:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
                        analysis_hours = get_setting('ANALYSIS_HOURS', 1)
                        offset_minutes = get_setting('OFFSET_MINUTES', 0)

                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏
                        total_hours = analysis_hours + (offset_minutes / 60)

                        integrity = await db_queries.check_data_integrity(symbol, int(total_hours * 60))  # –≤ –º–∏–Ω—É—Ç–∞—Ö

                        # –ï—Å–ª–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–µ 90%, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                        if integrity['integrity_percentage'] < 90:
                            logger.info(
                                f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} (—Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: {integrity['integrity_percentage']:.1f}%)")

                            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞–≥—Ä—É–∑–∫–∏
                            current_time_ms = int(datetime.now(timezone.utc).timestamp() * 1000)
                            end_time_ms = current_time_ms - (offset_minutes * 60 * 1000)
                            start_time_ms = end_time_ms - (int(total_hours * 60) * 60 * 1000)

                            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞–º–∏
                            batch_size_hours = 24  # 24 —á–∞—Å–∞ –∑–∞ —Ä–∞–∑
                            current_start = start_time_ms

                            while current_start < end_time_ms:
                                current_end = min(current_start + (batch_size_hours * 60 * 60 * 1000), end_time_ms)

                                try:
                                    klines = await bybit_api.get_kline_data(symbol, current_start, current_end)

                                    for kline in klines:
                                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –∑–∞–∫—Ä—ã—Ç—É—é —Å–≤–µ—á—É
                                        kline_data = {
                                            'start': kline['timestamp'],
                                            'end': kline['timestamp'] + 60000,  # +1 –º–∏–Ω—É—Ç–∞
                                            'open': kline['open'],
                                            'high': kline['high'],
                                            'low': kline['low'],
                                            'close': kline['close'],
                                            'volume': kline['volume']
                                        }

                                        await db_queries.save_historical_kline_data(symbol, kline_data)

                                    logger.debug(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(klines)} —Å–≤–µ—á–µ–π –¥–ª—è {symbol}")

                                except Exception as e:
                                    logger.error(
                                        f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol} –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {current_start}-{current_end}: {e}")

                                current_start = current_end
                                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

                        await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∏–º–≤–æ–ª–∞–º–∏

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
                        continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            await asyncio.sleep(1800)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            await asyncio.sleep(300)  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ


async def periodic_cleanup():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    while True:
        try:
            await asyncio.sleep(3600)  # –ö–∞–∂–¥—ã–π —á–∞—Å
            
            if alert_manager:
                await alert_manager.cleanup_old_data()
                
            if db_queries:
                retention_hours = get_setting('DATA_RETENTION_HOURS', 2)
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ db_queries
            else:
                logger.debug("üßπ –û—á–∏—Å—Ç–∫–∞ –ë–î –ø—Ä–æ–ø—É—â–µ–Ω–∞ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                
            logger.info("üßπ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")


app = FastAPI(title="Trading Volume Analyzer", lifespan=lifespan)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# WebSocket endpoint
@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    await connection_manager.connect(websocket)
    try:
        while True:
            # –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            data = await websocket.receive_text()
            await connection_manager.handle_client_message(websocket, data)
    except WebSocketDisconnect:
        connection_manager.disconnect(websocket)
    except Exception as e:
        logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {e}")
        connection_manager.disconnect(websocket)


# API endpoints
@app.get("/api/stats")
async def get_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if not db_queries:
            return {"error": "Database not initialized"}

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        watchlist = await db_queries.get_watchlist()
        # alerts_data = await db_queries.get_all_alerts(limit=1000)  # –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
        # favorites = await db_queries.get_favorites()  # –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ
        # trading_stats = await db_queries.get_trading_statistics()  # –ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        time_sync_info = {}
        if time_manager:
            time_sync_info = time_manager.get_sync_status()

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
        subscription_stats = {}
        if bybit_websocket:
            subscription_stats = bybit_websocket.get_connection_stats()

        return {
            "pairs_count": len(watchlist),
            "favorites_count": 0,  # –í—Ä–µ–º–µ–Ω–Ω–æ
            "alerts_count": 0,  # –í—Ä–µ–º–µ–Ω–Ω–æ
            "volume_alerts_count": 0,  # –í—Ä–µ–º–µ–Ω–Ω–æ
            "consecutive_alerts_count": 0,  # –í—Ä–µ–º–µ–Ω–Ω–æ
            "priority_alerts_count": 0,  # –í—Ä–µ–º–µ–Ω–Ω–æ
            "trading_stats": {},  # –í—Ä–µ–º–µ–Ω–Ω–æ
            "subscription_stats": subscription_stats,
            "last_update": datetime.now(timezone.utc).isoformat(),
            "system_status": "running",
            "time_sync": time_sync_info
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {"error": str(e)}


@app.get("/api/time")
async def get_time_info():
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –±–∏—Ä–∂–∏"""
    try:
        if time_manager:
            return time_manager.get_time_info()
        else:
            # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ UTC –≤—Ä–µ–º—è
            current_time_ms = int(datetime.now(timezone.utc).timestamp() * 1000)
            return {
                "is_synced": False,
                "serverTime": current_time_ms,
                "local_time": datetime.now(timezone.utc).isoformat(),
                "utc_time": datetime.now(timezone.utc).isoformat(),
                "time_offset_ms": 0,
                "status": "not_synced"
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        current_time_ms = int(datetime.now(timezone.utc).timestamp() * 1000)
        return {
            "is_synced": False,
            "serverTime": current_time_ms,
            "local_time": datetime.now(timezone.utc).isoformat(),
            "utc_time": datetime.now(timezone.utc).isoformat(),
            "time_offset_ms": 0,
            "status": "error",
            "error": str(e)
        }


@app.get("/api/watchlist")
async def get_watchlist():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
    try:
        if not db_queries:
            return {
                "error": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
                "pairs": [],
                "message": "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö"
            }
            
        pairs = await db_queries.get_watchlist_details()
        return {"pairs": pairs}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è watchlist: {e}")
        return {
            "error": str(e),
            "pairs": [],
            "message": "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"
        }


@app.post("/api/watchlist")
async def add_to_watchlist(item: WatchlistAdd):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –≤ watchlist"""
    try:
        if not db_queries:
            return {
                "status": "error",
                "message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            }
            
        await db_queries.add_to_watchlist(item.symbol)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É –≤ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä
        if bybit_websocket:
            bybit_websocket.trading_pairs.add(item.symbol)
            await bybit_websocket.subscribe_to_new_pairs({item.symbol})

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await connection_manager.broadcast_json({
            "type": "watchlist_updated",
            "action": "added",
            "symbol": item.symbol
        })

        return {"status": "success", "symbol": item.symbol}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ watchlist: {e}")
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ watchlist: {str(e)}"
        }


@app.get("/api/chart-data/{symbol}")
async def get_chart_data(symbol: str, interval: str = "1m", hours: int = 24):
    """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞"""
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞
        return {"chart_data": []}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/favorites")
async def get_favorites():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä"""
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        return {"favorites": []}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        return {"status": "error", "message": str(e)}


@app.post("/api/favorites")
async def add_to_favorites(item: FavoriteAdd):
    """–î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—É –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"""
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        return {"status": "success", "symbol": item.symbol}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ: {e}")
        return {"status": "error", "message": str(e)}


@app.delete("/api/favorites/{symbol}")
async def remove_from_favorites(symbol: str):
    """–£–¥–∞–ª–∏—Ç—å –ø–∞—Ä—É –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"""
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        return {"status": "success", "symbol": symbol}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ: {e}")
        return {"status": "error", "message": str(e)}


@app.get("/api/alerts/all")
async def get_all_alerts():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–ª–µ—Ä—Ç—ã"""
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
        return {
            "volume_alerts": [],
            "consecutive_alerts": [],
            "priority_alerts": []
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
        return {"status": "error", "message": str(e)}


@app.get("/api/alerts/symbol/{symbol}")
async def get_symbol_alerts(symbol: str, hours: int = 24):
    """–ü–æ–ª—É—á–∏—Ç—å –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞"""
    try:
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤ –ø–æ —Å–∏–º–≤–æ–ª—É
        return {"alerts": []}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è {symbol}: {e}")
        return {"status": "error", "message": str(e)}


@app.get("/api/settings")
async def get_settings():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        settings_by_category = get_settings_by_category()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        time_sync_info = {}
        if time_manager:
            time_sync_info = time_manager.get_sync_status()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
        system_status = {
            "database_available": db_queries is not None,
            "database_connection": db_connection is not None,
            "alert_manager_active": alert_manager is not None,
            "websocket_active": bybit_websocket is not None and bybit_websocket.is_running,
            "price_filter_active": price_filter is not None,
            "telegram_bot_enabled": telegram_bot is not None and telegram_bot.enabled
        }

        return {
            "categories": settings_by_category,
            "time_sync": time_sync_info,
            "system_status": system_status,
            "system_info": {
                "config_file": str(ENV_FILE_PATH) if ENV_FILE_PATH.exists() else "–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω",
                "config_exists": ENV_FILE_PATH.exists(),
                "last_modified": datetime.fromtimestamp(ENV_FILE_PATH.stat().st_mtime).isoformat() if ENV_FILE_PATH.exists() else None
            }
        }

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/paper-trades")
async def create_paper_trade(trade: PaperTradeCreate):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—É–º–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
    try:
        if not db_queries:
            return {
                "status": "error", 
                "message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±—É–º–∞–∂–Ω—É—é —Å–¥–µ–ª–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        trade_id = await db_queries.save_paper_trade(trade.dict())

        return {
            "status": "success",
            "trade_id": trade_id,
            "message": "–ë—É–º–∞–∂–Ω–∞—è —Å–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—É–º–∞–∂–Ω–æ–π —Å–¥–µ–ª–∫–∏: {e}")
        return {"status": "error", "message": str(e)}


@app.post("/api/trading/execute-trade")
async def execute_real_trade(trade: RealTradeCreate):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API
        api_key = get_setting('BYBIT_API_KEY', '')
        api_secret = get_setting('BYBIT_API_SECRET', '')

        if not api_key or not api_secret:
            raise HTTPException(status_code=400, detail="API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ Bybit API
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return {
            "status": "success",
            "order_id": "mock_order_123",
            "message": "–°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (demo —Ä–µ–∂–∏–º)"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Å–¥–µ–ª–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/trading/test-connection")
async def test_trading_connection(credentials: dict):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–æ—Ä–≥–æ–≤–æ–º—É API"""
    try:
        api_key = credentials.get('api_key')
        api_secret = credentials.get('api_secret')

        if not api_key or not api_secret:
            raise HTTPException(status_code=400, detail="API –∫–ª—é—á–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã")

        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        return {
            "success": True,
            "balance": 10000.0,
            "message": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (demo —Ä–µ–∂–∏–º)"
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/api/settings/schema")
async def get_settings_schema_endpoint():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ –∏ —Ç–∏–ø–∞–º–∏"""
    try:
        schema = get_settings_schema()
        return {"schema": schema}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ö–µ–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/settings")
async def update_settings(settings_update: SettingsUpdate):
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞"""
    try:
        settings = settings_update.settings
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–ª–æ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
        flat_settings = {}
        for key, value in settings.items():
            # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–π –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (—É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ)
            flat_settings[key] = value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–¥–Ω–∏–º –≤—ã–∑–æ–≤–æ–º
        success, errors = update_multiple_settings(flat_settings)
        
        if not success:
            return {
                "status": "error", 
                "message": "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", 
                "errors": errors
            }

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö —Å–∏—Å—Ç–µ–º—ã
        await update_all_components_settings(flat_settings)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await connection_manager.broadcast_json({
            "type": "settings_updated",
            "status": "success",
            "data": settings,
            "timestamp": int(datetime.now(timezone.utc).timestamp() * 1000),
            "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            "system_restart_required": False  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        })
        
        logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ API")
        return {
            "status": "success", 
            "updated_count": len(flat_settings),
            "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            "applied_immediately": True
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        if connection_manager:
            await connection_manager.broadcast_json({
                "type": "settings_update_error",
                "error": str(e),
                "timestamp": int(datetime.now(timezone.utc).timestamp() * 1000)
            })
        
        return {
            "status": "error", 
            "message": f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}", 
            "detail": str(e)
        }


@app.post("/api/settings/reset")
async def reset_settings(reset_data: SettingsReset):
    """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    try:
        if not reset_data.confirm:
            return {
                "status": "error",
                "message": "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            }
        
        success = reset_settings_to_default()
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
            from settings import load_settings
            new_settings = load_settings()
            await update_all_components_settings(new_settings)
            
            if connection_manager:
                await connection_manager.broadcast_json({
                    "type": "settings_reset",
                    "status": "success",
                    "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
                    "timestamp": int(datetime.now(timezone.utc).timestamp() * 1000)
                })
            
            return {
                "status": "success",
                "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
            }
        else:
            return {
                "status": "error",
                "message": "–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}"
        }


@app.get("/api/settings/export")
async def export_settings_endpoint():
    """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        settings = export_settings()
        return {
            "status": "success",
            "settings": settings,
            "exported_at": datetime.now(timezone.utc).isoformat(),
            "count": len(settings)
        }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/api/settings/import")
async def import_settings_endpoint(import_data: SettingsImport):
    """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        success, errors = import_settings(import_data.settings)
        
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
            await update_all_components_settings(import_data.settings)
            
            if connection_manager:
                await connection_manager.broadcast_json({
                    "type": "settings_imported",
                    "status": "success",
                    "count": len(import_data.settings),
                    "timestamp": int(datetime.now(timezone.utc).timestamp() * 1000)
                })
            
            return {
                "status": "success",
                "imported_count": len(import_data.settings),
                "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã"
            }
        else:
            return {
                "status": "error",
                "message": "–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
                "errors": errors
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}"
        }


@app.post("/api/settings/reload")
async def reload_settings_endpoint():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    try:
        from settings import reload_settings, load_settings
        await reload_settings()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
        new_settings = load_settings()
        await update_all_components_settings(new_settings)

        return {"status": "success", "message": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞"}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        raise HTTPException(status_code=500, detail=str(e))


@app.delete("/api/watchlist/{symbol}")
async def remove_from_watchlist(symbol: str):
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ—Ä–≥–æ–≤—É—é –ø–∞—Ä—É –∏–∑ watchlist"""
    try:
        if not db_queries:
            return {
                "status": "error",
                "message": "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
            }
            
        await db_queries.remove_from_watchlist(symbol)

        # –£–¥–∞–ª—è–µ–º –ø–∞—Ä—É –∏–∑ WebSocket –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if bybit_websocket:
            bybit_websocket.trading_pairs.discard(symbol)
            await bybit_websocket.unsubscribe_from_pairs({symbol})

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await connection_manager.broadcast_json({
            "type": "watchlist_updated",
            "action": "removed",
            "symbol": symbol
        })

        return {"status": "success", "symbol": symbol}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ watchlist: {e}")
        return {
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ watchlist: {str(e)}"
        }


# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist –ø–µ—Ä–µ–¥ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
if os.path.exists("dist"):
    if os.path.exists("dist/assets"):
        app.mount("/assets", StaticFiles(directory="dist/assets"), name="assets")


    @app.get("/vite.svg")
    async def get_vite_svg():
        if os.path.exists("dist/vite.svg"):
            return FileResponse("dist/vite.svg")
        raise HTTPException(status_code=404, detail="File not found")


    @app.get("/{full_path:path}")
    async def serve_spa(full_path: str):
        """–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ SPA –¥–ª—è –≤—Å–µ—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        if os.path.exists("dist/index.html"):
            return FileResponse("dist/index.html")
        raise HTTPException(status_code=404, detail="SPA not built")
else:
    @app.get("/")
    async def root():
        return {"message": "Frontend not built. Run 'npm run build' first."}

if __name__ == "__main__":
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    host = get_setting('SERVER_HOST', '0.0.0.0')
    port = get_setting('SERVER_PORT', 8000)

    uvicorn.run(
        "main:app",
        host=host,
        port=port,
        reload=False,
        log_level="info"
    )