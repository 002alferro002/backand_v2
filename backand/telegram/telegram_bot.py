import aiohttp
from typing import Dict, Optional
from datetime import datetime
from cryptoscan.backand.core.core_logger import get_logger
from cryptoscan.backand.core.core_utils import CoreUtils
from cryptoscan.backand.settings import get_setting

logger = get_logger(__name__)


class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.bot_token = get_setting('TELEGRAM_BOT_TOKEN', '')
        self.chat_id = get_setting('TELEGRAM_CHAT_ID', '')
        self.enabled = bool(self.bot_token and self.chat_id)
        
        if not self.enabled:
            logger.warning("Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TELEGRAM_BOT_TOKEN –∏ TELEGRAM_CHAT_ID –≤ .env")
        else:
            logger.info("Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _format_timestamp(self, timestamp) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ timestamp –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UTC"""
        return CoreUtils.format_timestamp(timestamp, '%H:%M:%S UTC')

    async def send_volume_alert(self, alert_data: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ –æ–±—ä–µ–º—É –≤ Telegram"""
        if not self.enabled:
            return False

        try:
            symbol = alert_data['symbol']
            price = alert_data['price']
            volume_ratio = alert_data.get('volume_ratio', 0)
            current_volume = alert_data.get('current_volume_usdt', 0)
            average_volume = alert_data.get('average_volume_usdt', 0)
            is_closed = alert_data.get('is_closed', False)
            is_true_signal = alert_data.get('is_true_signal')
            timestamp = alert_data.get('close_timestamp', alert_data['timestamp'])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç–º–æ–¥–∑–∏
            if is_closed:
                if is_true_signal:
                    emoji = "‚úÖ"
                    status = "–ò—Å—Ç–∏–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª"
                else:
                    emoji = "‚ùå"
                    status = "–õ–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª"
            else:
                emoji = "‚ö°"
                status = "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = self._format_timestamp(timestamp)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"""
{emoji} <b>–ê–õ–ï–†–¢ –ü–û –û–ë–™–ï–ú–£</b>

üí∞ <b>–ü–∞—Ä–∞:</b> {symbol}
üíµ <b>–¶–µ–Ω–∞:</b> ${price:,.8f}
üìä <b>–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞:</b> {volume_ratio}x
üìà <b>–¢–µ–∫—É—â–∏–π –æ–±—ä–µ–º:</b> ${current_volume:,.0f}
üìâ <b>–°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º:</b> ${average_volume:,.0f}
üéØ <b>–°—Ç–∞—Ç—É—Å:</b> {status}
üïê <b>–í—Ä–µ–º—è:</b> {time_str}

üîó <a href="https://www.tradingview.com/chart/?symbol=BYBIT:{symbol.replace('USDT', '')}USDT.P&interval=1">–û—Ç–∫—Ä—ã—Ç—å –≤ TradingView</a>

#VolumeAlert #{symbol.replace('USDT', '')}
            """.strip()
            
            return await self._send_message(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –ø–æ –æ–±—ä–µ–º—É –≤ Telegram: {e}")
            return False

    async def send_preliminary_alert(self, alert_data: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram"""
        if not self.enabled:
            return False

        try:
            symbol = alert_data['symbol']
            price = alert_data['price']
            volume_ratio = alert_data.get('volume_ratio', 0)
            current_volume = alert_data.get('current_volume_usdt', 0)
            timestamp = alert_data['timestamp']
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = self._format_timestamp(timestamp)
            
            message = f"""
‚ö° <b>–ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ</b>

üí∞ <b>–ü–∞—Ä–∞:</b> {symbol}
üíµ <b>–¶–µ–Ω–∞:</b> ${price:,.8f}
üìä <b>–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞:</b> {volume_ratio}x
üìà <b>–û–±—ä–µ–º:</b> ${current_volume:,.0f}
üïê <b>–í—Ä–µ–º—è:</b> {time_str}

‚è≥ <b>–û–∂–∏–¥–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...</b>

üîó <a href="https://www.tradingview.com/chart/?symbol=BYBIT:{symbol.replace('USDT', '')}USDT.P&interval=1">–û—Ç–∫—Ä—ã—Ç—å –≤ TradingView</a>

#PreliminaryAlert #{symbol.replace('USDT', '')}
            """.strip()
            
            return await self._send_message(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram: {e}")
            return False

    async def send_final_alert(self, alert_data: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram"""
        if not self.enabled:
            return False

        try:
            symbol = alert_data['symbol']
            price = alert_data['price']
            volume_ratio = alert_data.get('volume_ratio', 0)
            is_true_signal = alert_data.get('is_true_signal', False)
            timestamp = alert_data.get('close_timestamp', alert_data['timestamp'])
            preliminary_timestamp = alert_data.get('preliminary_timestamp')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ —ç–º–æ–¥–∑–∏
            if is_true_signal:
                emoji = "‚úÖ"
                status = "–ò—Å—Ç–∏–Ω–Ω—ã–π LONG"
            else:
                emoji = "‚ùå"
                status = "–õ–æ–∂–Ω—ã–π —Å–∏–≥–Ω–∞–ª (SHORT)"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = self._format_timestamp(timestamp)
            preliminary_time_str = self._format_timestamp(preliminary_timestamp) if preliminary_timestamp else "N/A"
            
            message = f"""
{emoji} <b>–§–ò–ù–ê–õ–¨–ù–´–ô –°–ò–ì–ù–ê–õ</b>

üí∞ <b>–ü–∞—Ä–∞:</b> {symbol}
üíµ <b>–¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:</b> ${price:,.8f}
üìä <b>–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞:</b> {volume_ratio}x
üéØ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {status}
üïê <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π:</b> {preliminary_time_str}
üïê <b>–ó–∞–∫—Ä—ã—Ç–∏–µ:</b> {time_str}

üîó <a href="https://www.tradingview.com/chart/?symbol=BYBIT:{symbol.replace('USDT', '')}USDT.P&interval=1">–û—Ç–∫—Ä—ã—Ç—å –≤ TradingView</a>

#FinalAlert #{symbol.replace('USDT', '')}
            """.strip()
            
            return await self._send_message(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram: {e}")
            return False

    async def send_consecutive_alert(self, alert_data: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –ø–æ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–º —Å–≤–µ—á–∞–º –≤ Telegram"""
        if not self.enabled:
            return False

        try:
            symbol = alert_data['symbol']
            price = alert_data['price']
            consecutive_count = alert_data.get('consecutive_count', 0)
            timestamp = alert_data.get('close_timestamp', alert_data['timestamp'])
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = self._format_timestamp(timestamp)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            if consecutive_count >= 10:
                emoji = "üöÄ"
            elif consecutive_count >= 7:
                emoji = "üîº"
            else:
                emoji = "üìà"
            
            message = f"""
{emoji} <b>–ê–õ–ï–†–¢ –ü–û –ü–û–î–†–Ø–î –ò–î–£–©–ò–ú –°–í–ï–ß–ê–ú</b>

üí∞ <b>–ü–∞—Ä–∞:</b> {symbol}
üíµ <b>–¶–µ–Ω–∞:</b> ${price:,.8f}
üïØÔ∏è <b>–ü–æ–¥—Ä—è–¥ LONG —Å–≤–µ—á–µ–π:</b> {consecutive_count}
üïê <b>–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è:</b> {time_str}

üîó <a href="https://www.tradingview.com/chart/?symbol=BYBIT:{symbol.replace('USDT', '')}USDT.P&interval=1">–û—Ç–∫—Ä—ã—Ç—å –≤ TradingView</a>

#ConsecutiveAlert #{symbol.replace('USDT', '')}
            """.strip()
            
            return await self._send_message(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö —Å–≤–µ—á–µ–π –≤ Telegram: {e}")
            return False

    async def send_priority_alert(self, alert_data: Dict) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram"""
        if not self.enabled:
            return False

        try:
            symbol = alert_data['symbol']
            price = alert_data['price']
            consecutive_count = alert_data.get('consecutive_count', 0)
            volume_ratio = alert_data.get('volume_ratio')
            current_volume = alert_data.get('current_volume_usdt')
            timestamp = alert_data.get('close_timestamp', alert_data['timestamp'])
            has_imbalance = alert_data.get('has_imbalance', False)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
            time_str = self._format_timestamp(timestamp)
            
            message = f"""
‚≠ê <b>–ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ô –°–ò–ì–ù–ê–õ</b>

üí∞ <b>–ü–∞—Ä–∞:</b> {symbol}
üíµ <b>–¶–µ–Ω–∞:</b> ${price:,.8f}
üïØÔ∏è <b>LONG —Å–≤–µ—á–µ–π –ø–æ–¥—Ä—è–¥:</b> {consecutive_count}
            """.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–º–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
            if volume_ratio and current_volume:
                message += f"""
üìä <b>–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –æ–±—ä–µ–º–∞:</b> {volume_ratio}x
üìà <b>–û–±—ä–µ–º:</b> ${current_volume:,.0f}
                """.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–º–±–∞–ª–∞–Ω—Å–µ
            imbalance_text = " + –∏–º–±–∞–ª–∞–Ω—Å" if has_imbalance else ""
            
            message += f"""

üéØ <b>–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª:</b> –ü–æ–¥—Ä—è–¥ –∏–¥—É—â–∏–µ LONG —Å–≤–µ—á–∏ + –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞{imbalance_text}
üïê <b>–í—Ä–µ–º—è:</b> {time_str}

üîó <a href="https://www.tradingview.com/chart/?symbol=BYBIT:{symbol.replace('USDT', '')}USDT.P&interval=1">–û—Ç–∫—Ä—ã—Ç—å –≤ TradingView</a>

#PriorityAlert #{symbol.replace('USDT', '')}
            """.strip()
            
            return await self._send_message(message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –≤ Telegram: {e}")
            return False

    async def send_system_message(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not self.enabled:
            return False

        try:
            formatted_message = f"ü§ñ <b>–°–∏—Å—Ç–µ–º–∞:</b> {message}"
            return await self._send_message(formatted_message)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False

    async def send_chart_screenshot(self, symbol: str, chart_data: bytes) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Telegram"""
        if not self.enabled:
            return False

        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendPhoto"
            
            data = aiohttp.FormData()
            data.add_field('chat_id', self.chat_id)
            data.add_field('caption', f"üìä –ì—Ä–∞—Ñ–∏–∫ {symbol}")
            data.add_field('photo', chart_data, filename=f'{symbol}_chart.png', content_type='image/png')

            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=data) as response:
                    if response.status == 200:
                        logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –¥–ª—è {symbol}")
                        return True
                    else:
                        response_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ Telegram: {response.status} - {response_text}")
                        return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Telegram: {e}")
            return False

    async def _send_message(self, message: str) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'HTML',
                'disable_web_page_preview': True
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(url, data=data) as response:
                    if response.status == 200:
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                        return True
                    else:
                        response_text = await response.text()
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.status} - {response_text}")
                        return False

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")
            return False

    def update_settings(self, bot_token: str = None, chat_id: str = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
        if bot_token:
            self.bot_token = bot_token
        if chat_id:
            self.chat_id = chat_id
        
        self.enabled = bool(self.bot_token and self.chat_id)
        
        if self.enabled:
            logger.info("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            logger.warning("‚ö†Ô∏è Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω - –Ω–µ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–¥–∞–Ω—ã")

    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        return {
            'enabled': self.enabled,
            'has_token': bool(self.bot_token),
            'has_chat_id': bool(self.chat_id)
        }