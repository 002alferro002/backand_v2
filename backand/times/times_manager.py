import asyncio
from datetime import datetime, timezone
from typing import Dict
from cryptoscan.backand.core.core_logger import get_logger
from cryptoscan.backand.core.core_exceptions import TimeSyncException
from .times_server_sync import TimeServerSync
from .times_exchange_sync import ExchangeTimeSync
from cryptoscan.backand.settings import get_setting

logger = get_logger(__name__)


class TimeManager:
    """–ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏"""

    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        self.time_server_sync = TimeServerSync()
        self.exchange_sync = ExchangeTimeSync(self.time_server_sync)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.time_server_sync_interval = get_setting('TIME_SERVER_SYNC_INTERVAL', 3600)  # 1 —á–∞—Å
        self.exchange_sync_interval = get_setting('TIME_SYNC_INTERVAL', 300)  # 5 –º–∏–Ω—É—Ç
        self.sync_method = 'auto'  # 'auto', 'exchange_only', 'time_servers_only'
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_running = False
        self.sync_task = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏"""
        self.is_running = True
        logger.info("üïê –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ UTC")

        try:
            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            await self.time_server_sync.sync_with_time_servers()

            # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∏—Ä–∂–µ–π
            await self.exchange_sync.sync_exchange_time()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            self.sync_task = asyncio.create_task(self._periodic_sync())
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—â–µ–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            raise TimeSyncException(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        self.is_running = False
        if self.sync_task:
            self.sync_task.cancel()
            try:
                await self.sync_task
            except asyncio.CancelledError:
                pass
        logger.info("üïê –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    async def _periodic_sync(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
        last_time_server_sync = datetime.now(timezone.utc)
        last_exchange_sync = datetime.now(timezone.utc)
        
        while self.is_running:
            try:
                current_time = datetime.now(timezone.utc)
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
                if (current_time - last_time_server_sync).total_seconds() > self.time_server_sync_interval:
                    await self.time_server_sync.sync_with_time_servers()
                    last_time_server_sync = current_time
                
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –±–∏—Ä–∂–µ–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if (current_time - last_exchange_sync).total_seconds() > self.exchange_sync_interval:
                    await self.exchange_sync.sync_exchange_time()
                    last_exchange_sync = current_time
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                    
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
                await asyncio.sleep(60)  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    def get_utc_timestamp_ms(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–π UTC timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"""
        if self.sync_method == 'time_servers_only' or not self.exchange_sync.is_exchange_synced:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            return self.time_server_sync.get_accurate_utc_timestamp_ms()
        elif self.sync_method == 'exchange_only':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±–∏—Ä–∂–µ–≤–æ–µ –≤—Ä–µ–º—è
            return self.exchange_sync.get_exchange_timestamp_ms()
        else:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞–º —Ç–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            if self.time_server_sync.is_synced:
                return self.time_server_sync.get_accurate_utc_timestamp_ms()
            elif self.exchange_sync.is_exchange_synced:
                return self.exchange_sync.get_exchange_timestamp_ms()
            else:
                # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ UTC –≤—Ä–µ–º—è
                return int(datetime.now(timezone.utc).timestamp() * 1000)

    def get_exchange_timestamp_ms(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å timestamp –±–∏—Ä–∂–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö"""
        return self.exchange_sync.get_exchange_timestamp_ms()

    def get_sync_status(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        utc_time = self.get_utc_timestamp_ms()
        
        return {
            'is_synced': self.time_server_sync.is_synced or self.exchange_sync.is_exchange_synced,
            'time_servers': self.time_server_sync.get_sync_status(),
            'exchange_sync': self.exchange_sync.get_sync_status(),
            'sync_method': self.sync_method,
            'utc_time': utc_time,
            'utc_time_iso': datetime.utcfromtimestamp(utc_time / 1000).isoformat() + 'Z',
            'serverTime': utc_time,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
            'status': 'active' if (self.time_server_sync.is_synced or self.exchange_sync.is_exchange_synced) else 'not_synced'
        }

    def set_sync_method(self, method: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        if method in ['auto', 'exchange_only', 'time_servers_only']:
            self.sync_method = method
            logger.info(f"üîß –ú–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {method}")
        else:
            logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {method}")
            raise TimeSyncException(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {method}")

    def is_candle_closed(self, kline_data: dict) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–≤–µ—á–∏"""
        if self.sync_method == 'exchange_only' and self.exchange_sync.is_exchange_synced:
            return self.exchange_sync.is_candle_closed(kline_data)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –≤—Ä–µ–º—è
            utc_time = self.get_utc_timestamp_ms()
            candle_end_time = int(kline_data['end'])
            return utc_time >= candle_end_time

    def get_time_info(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è API"""
        try:
            if self.time_server_sync.is_synced or self.exchange_sync.is_exchange_synced:
                return self.get_sync_status()
            else:
                # Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ UTC –≤—Ä–µ–º—è
                current_time_ms = int(datetime.now(timezone.utc).timestamp() * 1000)
                return {
                    "is_synced": False,
                    "serverTime": current_time_ms,
                    "local_time": datetime.now(timezone.utc).isoformat(),
                    "utc_time": datetime.now(timezone.utc).isoformat(),
                    "time_offset_ms": 0,
                    "status": "not_synced"
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            # –ê–≤–∞—Ä–∏–π–Ω—ã–π fallback
            current_time_ms = int(datetime.now(timezone.utc).timestamp() * 1000)
            return {
                "is_synced": False,
                "serverTime": current_time_ms,
                "local_time": datetime.now(timezone.utc).isoformat(),
                "utc_time": datetime.now(timezone.utc).isoformat(),
                "time_offset_ms": 0,
                "status": "error",
                "error": str(e)
            }

    def is_time_synced(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        return self.time_server_sync.is_synced or self.exchange_sync.is_exchange_synced