import { useState, useEffect, useCallback } from 'react';

interface StartupData {
  alerts: any[];
  watchlist: string[];
  favorites: any[];
  settings: any;
  trading_settings: any;
  data_integrity: any;
}

interface UseStartupDataReturn {
  data: StartupData | null;
  loading: boolean;
  error: string | null;
  reload: () => Promise<void>;
}

export const useStartupData = (): UseStartupDataReturn => {
  const [data, setData] = useState<StartupData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const loadData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);

      console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ...');

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
      const [alertsResponse, watchlistResponse, favoritesResponse, settingsResponse] = await Promise.all([
        fetch('/api/alerts/all'),
        fetch('/api/watchlist'),
        fetch('/api/favorites'),
        fetch('/api/settings')
      ]);

      const alerts = alertsResponse.ok ? await alertsResponse.json() : { volume_alerts: [], consecutive_alerts: [], priority_alerts: [] };
      const watchlist = watchlistResponse.ok ? await watchlistResponse.json() : { pairs: [] };
      const favorites = favoritesResponse.ok ? await favoritesResponse.json() : { favorites: [] };
      const settings = settingsResponse.ok ? await settingsResponse.json() : {};

      const startupData = {
        alerts: [
          ...(alerts.volume_alerts || []),
          ...(alerts.consecutive_alerts || []),
          ...(alerts.priority_alerts || [])
        ],
        watchlist: watchlist.pairs?.map((p: any) => p.symbol) || [],
        favorites: favorites.favorites || [],
        settings: settings,
        trading_settings: {},
        data_integrity: {}
      };

      setData(startupData);
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
        alerts: startupData.alerts?.length || 0,
        watchlist: startupData.watchlist?.length || 0,
        favorites: startupData.favorites?.length || 0,
        settings: Object.keys(startupData.settings || {}).length
      });

    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(errorMessage);
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', err);
    } finally {
      setLoading(false);
    }
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  const reload = useCallback(async () => {
    try {
      setError(null);
      console.log('üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...');
      
      // –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const reloadResponse = await fetch('/api/startup/data/reload', {
        method: 'POST'
      });
      
      if (reloadResponse.ok) {
        const reloadData = await reloadResponse.json();
        setData(reloadData.data);
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å —Å–µ—Ä–≤–µ—Ä–∞');
      } else {
        // –ï—Å–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ—Å—Ç–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ
        await loadData();
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
      await loadData();
    }
  }, [loadData]);

  useEffect(() => {
    loadData();
  }, [loadData]); // –¢–µ–ø–µ—Ä—å loadData —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–ª–∞–≥–æ–¥–∞—Ä—è useCallback

  return {
    data,
    loading,
    error,
    reload
  };
};

export default useStartupData;